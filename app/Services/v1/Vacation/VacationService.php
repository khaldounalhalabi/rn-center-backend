<?php

namespace App\Services\v1\Vacation;

use App\Enums\AppointmentStatusEnum;
use App\Enums\VacationStatusEnum;
use App\Models\Vacation;
use App\Repositories\AppointmentRepository;
use App\Repositories\UserRepository;
use App\Repositories\VacationRepository;
use App\Services\Contracts\BaseService;
use App\Traits\Makable;
use Illuminate\Database\Eloquent\Model;

/**
 * @extends BaseService<Vacation>
 * @property VacationRepository $repository
 */
class VacationService extends BaseService
{
    use Makable;

    protected string $repositoryClass = VacationRepository::class;

    public function byUser(int $userId, array $relations = [], array $countable = []): ?array
    {
        return $this->repository->getByUser($userId, $relations, $countable);
    }

    public function view($id, array $relationships = [], array $countable = []): ?Model
    {
        /** @var Vacation $vacation */
        $vacation = parent::view($id, $relationships, $countable); // TODO: Change the autogenerated stub
        return $vacation?->canShow() ? $vacation : null;
    }

    public function store(array $data, array $relationships = [], array $countable = []): ?Vacation
    {
        $user = UserRepository::make()->find($data['user_id']);
        if ($user->isDoctor()) {
            $appointmentsCount = $this->getAppointmentsCountInVacationDate($user, $data['from'], $data['to']);

            if ($appointmentsCount > 0) {
                return null;
            }
        }

        return parent::store($data, $relationships, $countable);
    }

    public function update(array $data, $id, array $relationships = [], array $countable = []): ?Model
    {
        $user = UserRepository::make()->find($data['user_id']);
        if ($user->isDoctor()) {
            $appointmentsCount = $this->getAppointmentsCountInVacationDate($user, $data['from'], $data['to']);

            if ($appointmentsCount > 0) {
                return null;
            }
        }

        return parent::update($data, $id, $relationships, $countable); // TODO: Change the autogenerated stub
    }

    public function delete($id): ?bool
    {
        $vacation = $this->repository->find($id);

        if (!$vacation->canDelete()) {
            return null;
        }

        $vacation->delete();

        return true;
    }

    public function toggleStatus(array $data)
    {
        $vacation = $this->repository->find($data['vacation_id']);

        if (!$vacation) {
            return null;
        }

        $user = $vacation->user;

        if ($data['status'] == $vacation->status) {
            return $data['status'];
        }

        if ($data['status'] == VacationStatusEnum::APPROVED->value && $user->isDoctor()) {
            $appointmentsCount = $this->getAppointmentsCountInVacationDate($user, $vacation->from, $vacation->to);

            if ($appointmentsCount > 0) {
                return null;
            }
        }

        $this->repository->update([
            'status' => $data['status'],
        ], $vacation);

        return $data['status'];
    }

    /**
     * @param mixed  $user
     * @param string $from
     * @param string $to
     * @return int
     */
    private function getAppointmentsCountInVacationDate(mixed $user, string $from, string $to): int
    {
        return AppointmentRepository::make()
            ->globalQuery()
            ->where('status', AppointmentStatusEnum::BOOKED->value)
            ->where('clinic_id', $user->getClinicId())
            ->whereDate('date_time', '>=', $from)
            ->whereDate('date_time', '<=', $to)
            ->count();
    }
}
